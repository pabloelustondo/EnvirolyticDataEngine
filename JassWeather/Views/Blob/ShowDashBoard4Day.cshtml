@model JassWeather.Models.JassWeatherAPI.VariableValueModel
@using JassWeather.Models
<style>
    table {
        table-layout: fixed;
    }

    th, td {
        width: 2px;
        font-size: xx-small;
    }
</style>

@{

    //location stuff
    int locationY = (Model.JassLatLon != null && Model.JassLatLon.narrY != null) ? (int)Model.JassLatLon.narrY : 133;
    int locationX = (Model.JassLatLon != null && Model.JassLatLon.narrX != null) ? (int)Model.JassLatLon.narrX : 241;

}

<h2>Values for @Model.fileName for time step=@Model.stepIndex</h2>
Click here for other time steps:
@for (int i = 0; i < Model.gridValues.timeLength; i++)
{
    DateTime now = new DateTime(2012, 1, 1);
    string stime = "" + now.AddHours(i * 3 - 4).Hour + "hr";
    @Html.ActionLink("" + i + "(" + stime + ")", "ShowDashBoard4Day", new { variableName = @Model.variableName, yearIndex = @Model.yearIndex, monthIndex = @Model.monthIndex, dayIndex = @Model.dayIndex, stepIndex = i, levelIndex = Model.levelIndex })
}
@if (Model.gridValues.levelLength > 1)
{
    <text>Click here for other level steps: </text>
    for (int i = 0; i < Model.gridValues.levelLength; i++)
    {
        Html.ActionLink("" + i, "ShowDashBoard4Day", new { variableName = @Model.variableName, yearIndex = @Model.yearIndex, monthIndex = @Model.monthIndex, dayIndex = @Model.dayIndex, stepIndex = Model.stepIndex, levelIndex = i });
    }
}
<br />
Max Value:  @Model.gridValues.measureMax[0]  Min Value : @Model.gridValues.measureMin[0]
<br />MaxPosition Y:@Model.gridValues.maxY[0] X:@Model.gridValues.maxX[0] T:@Model.gridValues.maxT[0]
<br />MinPosition Y:@Model.gridValues.minY[0] X:@Model.gridValues.minX[0] T:@Model.gridValues.minT[0]

<table>
    <tr>
        @foreach (var v in Model.gridValues.variableMetadata)
        {
            <td>@v.Key<text>:</text>@v.Value</td>
        }
    </tr>
</table>
Color Scale

<table>
    <tr>
        @{
            Boolean CC = false;
            if (Model.colorCode != null)
            {
                CC = true;
            }

            double range = Model.gridValues.measureMax[0] - Model.gridValues.measureMin[0];
            double myfactor = (range > 0) ? (1024 / range) : 1;
            int start, end;

            start = 0;
            end = 1024;
        }



        @if (!CC)
        {
            for (var c = start; c < end; c++)
            {
                JassRGB rgb = JassWeatherAPI.rgb(c, start, end);
                <td style="background-color:rgb(@rgb.r,@rgb.g,@rgb.b)">
                    @(c * range / 1024 + Model.gridValues.measureMin[0])
                </td>
            }
        }
        else
        {
            {
                <td style="background-color:@Model.colorCode.Color0">  low</td>
                <td style="background-color:@Model.colorCode.Color1">@Model.colorCode.Value1</td>
                <td style="background-color:@Model.colorCode.Color2">@Model.colorCode.Value2</td>
                <td style="background-color:@Model.colorCode.Color3">@Model.colorCode.Value3</td>
                <td style="background-color:@Model.colorCode.Color4">@Model.colorCode.Value4</td>
                <td style="background-color:@Model.colorCode.Color5">@Model.colorCode.Value5</td>
                <td style="background-color:@Model.colorCode.Color6">@Model.colorCode.Value6</td>
                <td style="background-color:@Model.colorCode.Color7">@Model.colorCode.Value7</td>
                <td style="background-color:@Model.colorCode.Color8">@Model.colorCode.Value8</td>
                <td style="background-color:@Model.colorCode.Color9">@Model.colorCode.Value9</td>
                <td style="background-color:@Model.colorCode.Color10">@Model.colorCode.Value10</td>
                <td style="background-color:@Model.colorCode.Color11">@Model.colorCode.Value11</td>
                <td style="background-color:@Model.colorCode.Color12">@Model.colorCode.Value12</td>
            }
        }
        }
    </tr>
</table>

<table>
    <tr>
        <th>
            Y
        </th>
        @for (int x = 0; x < Model.gridValues.xLength; x++)
        {
            <th>
                @x
            </th>
        }
    </tr>

    @for (int y = Model.gridValues.yLength - 1; y >= 0; y--)
    {
        <tr>
            <td>
                @y
            </td>
            @for (int x = 0; x < Model.gridValues.xLength; x++)
            {
                string borderStyle = "none";
                if (y == locationY || x == locationX) { borderStyle = "solid"; }
                JassWeather.Models.JassRGB rgb;
                if (Model.gridValues.measure[0, 0, y, x] != null)
                {
                    double scaledValue = ((double)Model.gridValues.measure[Model.stepIndex, 0, y, x] - Model.gridValues.measureMin[0]) * myfactor;
                    rgb = JassWeather.Models.JassWeatherAPI.rgb(scaledValue, 0, 1024);
                }
                else
                {
                    rgb = new JassRGB(0, 0, 0);
                }
                if (!CC)
                {
                    <td style="background-color:rgb(@rgb.r,@rgb.g,@rgb.b); border-style:@borderStyle; border-color:black; border-width:medium">


                        @y,@x:
                        @Model.gridValues.measure[Model.stepIndex, 0, y, x]
                    </td>
                }
                else
                {

                    var value = Model.gridValues.measure[Model.stepIndex, 0, y, x];

                    if (value > 0 && value < 10)
                    {
                        var crap = "crap";
                    }
                    var color = Model.colorCode.Color0;
                    if (value >= Model.colorCode.Value1 && value < Model.colorCode.Value2) { color = Model.colorCode.Color1; }
                    if (value >= Model.colorCode.Value2 && value < Model.colorCode.Value3) { color = Model.colorCode.Color2; }
                    if (value >= Model.colorCode.Value3 && value < Model.colorCode.Value4) { color = Model.colorCode.Color3; }
                    if (value >= Model.colorCode.Value4 && value < Model.colorCode.Value5) { color = Model.colorCode.Color4; }
                    if (value >= Model.colorCode.Value5 && value < Model.colorCode.Value6) { color = Model.colorCode.Color5; }
                    if (value >= Model.colorCode.Value6 && value < Model.colorCode.Value7) { color = Model.colorCode.Color6; }
                    if (value >= Model.colorCode.Value7 && value < Model.colorCode.Value8) { color = Model.colorCode.Color7; }
                    if (value >= Model.colorCode.Value8 && value < Model.colorCode.Value9) { color = Model.colorCode.Color8; }
                    if (value >= Model.colorCode.Value9 && value < Model.colorCode.Value10) { color = Model.colorCode.Color9; }
                    if (value >= Model.colorCode.Value10 && value < Model.colorCode.Value11) { color = Model.colorCode.Color10; }
                    if (value >= Model.colorCode.Value11 && value < Model.colorCode.Value12) { color = Model.colorCode.Color11; }
                    if (value >= Model.colorCode.Value12) { color = Model.colorCode.Color12; }



                    <td style="background-color:@color; border-style:@borderStyle; border-color:black; border-width:medium">

                        @y,@x:
                        @value
                    </td>


                }

            }
        </tr>
    }

</table>
