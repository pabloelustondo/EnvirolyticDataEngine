@model JassWeather.Models.JassWeatherAPI.VariableValueModel
@using JassWeather.Models
<style>

table { table-layout: fixed; }
th, td { width: 2px; font-size:xx-small}

</style>

@{
    
    DateTime requiredDay = new DateTime(@Model.year,@Model.monthIndex,@Model.dayIndex);
    double numberOfDaysFromBeginning = (requiredDay - Model.startingDate).TotalDays;
    int timeIndex = (int)(numberOfDaysFromBeginning * Model.stepsInADay);
    
    //location stuff
    int locationY = (Model.JassLatLon != null && Model.JassLatLon.narrY != null) ? (int)Model.JassLatLon.narrY : 133;
    int locationX = (Model.JassLatLon != null && Model.JassLatLon.narrX != null) ? (int)Model.JassLatLon.narrX : 241;

}

<h2>Values for @Model.fileName for Day @requiredDay  at step=@Model.stepIndex </h2>
Click here for other time steps: 
@for(int i=0; i< 10 && i< Model.gridValues.timeLength;i++){
    DateTime now = new DateTime(2012, 1, 1);
    string stime = "" + now.AddHours(i * 3 - 4).Hour + "hr";
 @Html.ActionLink(""+i+"("+stime+")", "ShowDashBoard4DayFromFile", new { variableName=@Model.variableName, yearIndex=@Model.yearIndex, monthIndex=@Model.monthIndex, dayIndex=@Model.dayIndex, stepIndex=i, levelIndex=Model.levelIndex })    
}
@if(Model.gridValues.levelLength>1){ 
       
<text>Current Level: @Model.levelIndex - Click here for other level steps: </text>
    for(int i=0;i<Model.gridValues.levelLength;i++){
        @Html.ActionLink("" + i, "ShowDashBoard4DayFromFile", new { variableName = @Model.variableName, yearIndex = @Model.yearIndex, monthIndex = @Model.monthIndex, dayIndex = @Model.dayIndex, stepIndex = Model.stepIndex, levelIndex = i });    
}}
     <br />
Max Value:  @Model.gridValues.measureMax[0]  Min Value : @Model.gridValues.measureMin[0] 
<br />MaxPosition Y:@Model.gridValues.maxY[0] X:@Model.gridValues.maxX[0] T:@Model.gridValues.maxT[0] 
<br />MinPosition Y:@Model.gridValues.minY[0] X:@Model.gridValues.minX[0] T:@Model.gridValues.minT[0]

<table><tr>
@foreach (var v in Model.gridValues.variableMetadata)
{
    <td>@v.Key<text>:</text>@v.Value</td>
}
</tr></table>
Color Scale

<table><tr>
@{
    double range = Model.gridValues.measureMax[0] - Model.gridValues.measureMin[0];
    double myfactor = (range>0)? (1024 / range):1;
    int start, end;

        start = 0;
        end = 1024;
    }




    @for (var c = start; c < end; c++ )
    {JassRGB rgb = JassWeatherAPI.rgb(c,start,end);
    <td style="background-color:rgb(@rgb.r,@rgb.g,@rgb.b)">
        @(c*range/1024 + Model.gridValues.measureMin[0])</td>
    }
</tr></table>

<table>
    <tr>
        <th>
            Y
        </th>
        @for (int x = 0; x < Model.gridValues.xLength; x++ ){
        <th>
            @x
        </th>
        }
    </tr>

@for (int y = Model.gridValues.yLength-1; y >= 0 ; y--)
{
    <tr>
        <td>
            @y
        </td>
           @for (int x = 0; x < Model.gridValues.xLength; x++)
           {
               JassWeather.Models.JassRGB rgb;
               if (Model.gridValues.measure[Model.stepIndex, 0, y, x] != null)
               {
                   double scaledValue = ((double)Model.gridValues.measure[Model.stepIndex, 0, y, x] - Model.gridValues.measureMin[0]) * myfactor;
                   rgb = JassWeather.Models.JassWeatherAPI.rgb(scaledValue, 0, 1024);
               }
               else
               {
                   rgb = new JassRGB(0, 0, 0);
               }
               string borderStyle = "none";
               if (y == locationY || x == locationX) { borderStyle = "solid"; }
            <td style="background-color:rgb(@rgb.r,@rgb.g,@rgb.b); border-style:@borderStyle; border-color:black; border-width:medium">
                @y,@x
                @Model.gridValues.measure[Model.stepIndex, 0, y, x]
            </td>
           }
    </tr>
}

</table>

