@model JassWeather.Controllers.LatLonGroupController.ShowLocationBasedDashboardModel
@{
    ViewBag.Title = "ShowLocationBasedDashboard";
}

<h2>Locations Status for @Model.latlonGroup.Name</h2>
@Model.Message
@if (Model.generateFiles)
{
    <p>Find your files <a href="/Blob/ShowAppTempFiles">here</a> </p>
}
@{
    int numberOfLocations = Model.latlonGroup.JassLatLons.Count;
    int numberOfVariables = Model.gridValues.Count;
    var locations = Model.latlonGroup.JassLatLons;
    var variables = Model.gridValues;
    }


            @for (int l = 0; l < locations.Count; l++)
        { <H1>@locations[l].Name</H1><p>y:@locations[l].narrY, x:@locations[l].narrX, hrDifference: @locations[l].hrDifference</p>
    <table>
    <tr>
        <td>UTC hr</td><td>Loc hr</td>
              @for (int v = 0; v < variables.Count; v++)
                    {
                        <td>@variables[v].VariableName</td>  
                    }

    </tr>
     
        @for (int s = 0; s < 8; s++)
        {
            DateTime day = new DateTime();          
    <tr>
        <td>@(day.Hour+s*3)</td>@{int d = day.Hour + s * 3 + locations[l].hrDifference;}
        <td>@((d<0)?24+d:d)</td>
                    @for (int v = 0; v < variables.Count; v++)
                    {
                        <td>@Math.Round((decimal)variables[v].measure[s, 0, (int)locations[l].narrY, (int)locations[l].narrX],7)</td>                     
                    }
    </tr>
        }
        </table>
        }


<br />
<br />

@using (Html.BeginForm()) {
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>JassBuilder</legend>

        <div class="editor-field">
            Generate File?
            @Html.EditorFor(model => model.generateFiles)
            @Html.ValidationMessageFor(model => model.generateFiles)
            Use Fixed Columns?
            @Html.EditorFor(model => model.generateFilesWithFixedColumns)
            @Html.ValidationMessageFor(model => model.generateFilesWithFixedColumns)
        </div>

        <div class="editor-label">
            Year
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.year)
            @Html.ValidationMessageFor(model => model.year)
        </div>
                <div class="editor-label">
            Month
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.month)
            @Html.ValidationMessageFor(model => model.month)
        </div>
        <div class="editor-label">
            Day
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.day)
            @Html.ValidationMessageFor(model => model.year)
        </div>
        If only interested in one day, leave the next one as 0
        <div class="editor-label">
            Year
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.yearEnd)
            @Html.ValidationMessageFor(model => model.yearEnd)
        </div>
        <div class="editor-label">
            Month
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.monthEnd)
            @Html.ValidationMessageFor(model => model.monthEnd)
        </div>
        <div class="editor-label">
            Day
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.dayEnd)
            @Html.ValidationMessageFor(model => model.dayEnd)
        </div>

        @for (int v = 0; v < Model.variableChoices.Length; v++)
        {
        <div class="editor-field">
            @Html.DisplayFor(model => model.variables[v].Name)
            @Html.CheckBoxFor(model => model.variableChoices[v])
        </div>

        }


         <p>
            <input type="submit" value="Submit" />
        </p>
     </fieldset>
}